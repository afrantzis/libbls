========================================
Data Object Memory Managment in libbless
========================================

:Author: Alexandros Frantzis
:Date: 20 Oct 2008

.. sectnum::
    :suffix: .

.. contents:: **Table of Contents**

Introduction
============

Buffers in the libbless library may contain data from various data objects like
files, memory regions or devices. In many cases only a part of a data object is
actually used in a buffer (eg only some bytes from a file). Every such
*continuous* part of a data object is abstractly called a segment.  

If a segment is to be a *continuous* part of a data object, some kind of order
must be present in the data within the data object. This order is naturally the
offset of the particular piece of data in the each object (eg the offset of a
byte in the file). Therefore, a segment can be complete described using three
properties:

    1. The data object the segment is part of
    2. The start of the continuous range within the data object.
    3. The length of the continuous range.

Ofcourse, this not the only way to describe a segment. For example, instead of
using a (start, length) notation for the range, one could use a (start, end)
notation. In libbless we will use the first notation.

Segments are logically ordered to construct a buffer. For example a buffer may
contain some bytes from memory (segment 1), some bytes from a file (segment 2)
and some more bytes from memory (segment 3). This ordering is done by the
mysterious Segment Collection ADT which is the subject of another treatise.

The purpose of this treatise is to explore the implications of managing data
objects using segments and to try to offer some insights and solutions to the
issues that will arise.

Design options
==============

Before we begin it is crucial to mention a couple of design options regarding
segments and data objects. These design options are ownership, sharing and
immutability.

Ownership
---------

The notion of ownership of data is strongly connected to memory management. In
essence an entity owns some data if it is responsible for managing its memory
(eg freeing it).

By default, when a segcol becomes associated with some data, it becomes their
owner. The segcol can do whatever it wants with it, so the user who provided
the data must not rely on any reference (eg pointers) to that data as being
valid.

Data object sharing
-------------------

It is sometimes efficient and some other times necessary to be able to point
multiple segments to the same data object. This allows, for example, the
copying of data in a buffer without copying the actual data in memory.

The neccesity of sharing can be demonstrated by the following example. Assume
that we have a segcol that contains a segment that is associated with a data
object that corresponds to a file::

    (notation: segment[data_object,offset,size])

        s1[d1, 0, 1GB]

Let's say that we want to insert one byte at offset 100. We create a new data
object d2 size 1 that contains that byte and we associate it with segment s2.
In order to insert s2 to the segcol we must split s1. Now depending on whether
we allow sharing we proceed as follows:

1. Without sharing

   We create a data object d3 size 1GB that contains a copy of the contents of d1
   and associate it with segment s3. Then we change the ranges of s1 and s3 and we
   finally get::

       s1[d1, 0, 100] - s2[d2, 0, 1] - s3[d3, 100, 1GB-100+1]

   We need 1GB + 1 byte of data memory!

2. With sharing

   We proceed as above but we don't create a copy of the contents of d1. Segment
   s3 just shares d1 with s1::

       s1[d1, 0, 100] - s2[d2, 0, 1] - s3[d1, 100, 1GB-100+1]

   We need just 1 byte of data memory!

All this sharing business sounds great until we try to free a data object. Now
we must take into account that other segments are possibly associated with that
object. If we were to lightheartedly free the object we would soon be facing an
unpleasant situation.

Fortunately, the solution is straightforward. We associate a usage count with
each data object and free an object only when its usage count reaches zero.

Immutability
------------

Immutability refers to the design decision that the data contained in various
data objects may not change. We are not allowed to directly change the data,
for example by changing the value of a byte in the data. This is especially
important when dealing with shared data objects.

For memory efficiency we may apply this rule only to parts of the data objects
that are not used. Consider having a buffer consisting of a single large (eg
1GB) data object. This is represented by a single segment pointing to the
object and covering its whole range. Now, let's say that we want to keep only
the last byte of the object. To accomplish that we split the segment so that
the first new segment covers all the range except the last byte and the second
segment only the last byte (these two segments share the same data object).
Finally, we delete the first segment.

The usage counting mechanism sees that a segment (the second one) is still
associated with the data object and correctly leaves it in memory. Now we are
keeping around a useless 1GB memory region so that we can read one byte. Oops.

To alleviate the problem of wasted memory we must free all unused memory. One
way to achieve this is to copy all of the used parts of the data object to a
new data object and update the related segments to point to the new data object
(and respective ranges). A better alternative is to use the already allocated
data object memory and move all used data towards the front. Then we can just
resize the data object (eg realloc). In this way we don't need any extra
memory. Ofcourse, we still have to update the ranges of the related segments.

Concurrency issues
==================

When dealing with shared data objects we must take care to ensure correct
functioning under concurrent access. This effectively means that in the general
case every access to a shared data object (and its metadata) must be protected
by a locking mechanism.  Apart from the performance hit, this scheme has the
drawback that it forces us to use a specific locking mechanism (eg pthread
read-write locks) inside the library.

Note, however, that the segcol ADT is clearly not thread-safe. So, for a single
segcol the user must provide their own external locking scheme, if it is
needed. This means that access to the segcol and its shared data objects its
protected anyway. So, there is no need for an internal locking scheme!

Unfortunately, the above reasoning only holds when the data objects are shared
within a single segcol. If a data object is shared between two or more segcols
the user must additionally ensure that access to these segcols does not happen
concurrently. 

What libbless implements
========================

Libbless currently uses immutable data objects and allows object sharing within
a single segcol. The segcol takes ownership of the data objects and usage
counting to know when to free them.

The memory optimization described in section `Immutability`_ may be implemented
at a later time.

